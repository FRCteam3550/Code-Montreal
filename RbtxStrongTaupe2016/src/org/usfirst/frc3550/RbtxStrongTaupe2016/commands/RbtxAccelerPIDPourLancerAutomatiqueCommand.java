// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016.commands;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.util.Date;

import org.usfirst.frc3550.RbtxStrongTaupe2016.Robot;
import org.usfirst.frc3550.RbtxStrongTaupe2016.filtering.LowPassFilter;

/**
 * La commande RbtxAccelerPourLancerCommand permet de mettre l accelerateur a une vitesse optimale
 * Lorsque cette vitesse est atteinte indicateur lumineux est active sur le dashboard
 * L operateur peut alors activer la gachette
 */
public class RbtxAccelerPIDPourLancerAutomatiqueCommand extends Command {
	
	private LowPassFilter m_lpf;
//	private RPMEncoder m_encoderpidsource;
//	private EncoderOutput m_encoderoutput;
	//private PIDController m_pc; 
	
	public final static double MAGIC = 0.0002;
	public final static int MAX_SPEED = 5000;
	
	public static double p = 5;  // start with 2.4
	public static double i = 0; //1.0*MAGIC;
	public static double d = 0;//6.0*MAGIC;   //End of to validate
	
	
	private PIDController encoderShooterPID; // formely defined, needs to be changed or modified
	
	private double RPMSetpoint; // formely defined, needs to be changed
	private double RPMupdate; // formely defined, needs to be changed
	double error; //formely defined, needs to be changed.
	
	private final double TOLERANCE = 0.1;
	private final double KP_opticalEncoder = 0.0001; //-2 / 5.0; // to set later on
	private final double KI_opticalEncoder = 0;
    private final double KD_opticalEncoder = 0;
    
    
    public RbtxAccelerPIDPourLancerAutomatiqueCommand(double RPMSetpoint) {
    	
     requires(Robot.shooter);
     this.RPMSetpoint = RPMSetpoint;
     
    PIDSource  RPMEncoder = new PIDSource(){
		 PIDSourceType m_sourceType = PIDSourceType.kDisplacement;
		public double pidGet(){
			return Robot.shooter.getEncoderShooterRPM();
		}

		@Override
		public void setPIDSourceType(PIDSourceType pidSource) {
			// TODO Auto-generated method stub
			m_sourceType = pidSource;
			
		}

		@Override
		public PIDSourceType getPIDSourceType() {
			// TODO Auto-generated method stub
			return m_sourceType;
		}
	};
	
	PIDOutput EncodeurOutput = new PIDOutput() {
		
		@Override
		public void pidWrite(double output) {
			// TODO Auto-generated method stub
			
			RPMupdate = output;
			//if(RPMupdate > 1) 
				//RPMupdate = 1;
			//if(RPMupdate < 0)
				//RPMupdate = -RPMupdate;				
		}
	};
	
	encoderShooterPID = new PIDController(p,  i, d,0, RPMEncoder, EncodeurOutput);
	encoderShooterPID.setAbsoluteTolerance(0.001);
    
 	}
 	
 /*	class EncoderOutput implements PIDOutput {
 		public double value = 0;
 		
 		public void pidWrite(double output){
 			value = output;
 		}
 	}*/
 	
 	

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.shooter.resetEncodeurShooter();
    	encoderShooterPID.reset();
    	encoderShooterPID.reset();
    	encoderShooterPID.enable();
    	encoderShooterPID.setSetpoint(RPMSetpoint);
	
    	setTimeout(7); //change from 9 seconds to 5 seconds and should be tested with the new value
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//SmartDashboard.putNumber("OpticalEncoder set: ", turnRate);
    	//Robot.accelerateur.setCurrentShooterSpeed(turnSpeedUpdate);
    	error = (RPMSetpoint - Robot.shooter.getEncoderShooterRPM());
    	//Robot.shooter.setShooterRPM(RPMupdate);
    	SmartDashboard.putNumber("RMPActual: ", Robot.shooter.getEncoderShooterRPM()); //for debugging purpose only. To remove
    	SmartDashboard.putNumber("RMPSetpoint: ", RPMSetpoint); //for debugging purpose only. To remove
    	SmartDashboard.putNumber("RMPError: ", error); //for debugging purpose only. To remove
    	SmartDashboard.putNumber("Updated RPM value: ", RPMupdate/p);// for debugging purpose only
    	SmartDashboard.putNumber("Updated RPM Normalisee: ", RPMupdate);// for debugging purpose only
    	Robot.shooter.setShooterRPM(RPMupdate);
    	//RobotMap.moteurAccelerateur.set(0.75);
    	//accelerateurPret = (Robot.accelerateur.accelererateurPret() == true);
    	//Robot.ramasseur.aspirerLeBallon();
    	//SmartDashboard.putBoolean("Accelerateur Pret", accelerateurPret);	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	//Robot.shooter.stop();
    	//Robot.shooter.resetEncodeurShooter();
    	encoderShooterPID.reset();
    	encoderShooterPID.disable();
    	encoderShooterPID.disable();
    	//Robot.shooter.resetEncodeurShooter();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	encoderShooterPID.reset();
    	encoderShooterPID.disable();
    	encoderShooterPID.disable();
    }
}

